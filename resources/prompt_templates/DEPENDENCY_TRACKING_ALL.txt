You are an expert reasoning graph architect. Given a problem and a step-by-step solution, identify the **direct dependencies** between steps. For each step `t` (0-indexed), output a list of step indices that step `t` **directly requires** to justify its correctness. Adhere strictly to these rules:

1. **Direct Use Only**:  
   Include step `i` in step `t`'s dependencies **only if** step `t` explicitly uses the result, lemma, or output from step `i`. Ignore indirect dependencies.

2. **Minimal & Non-Redundant**:  
   - If step `t` uses identical information from multiple steps (e.g., the same lemma), include **only the earliest step** (smallest index).  
   - The set must be the **minimal** required to verify step `t`.

3. **Output Format**:  
   - First, for each step, provide a detailed explanation of its dependencies (see example below).
   - Then, return a JSON object with keys as step indices (integers) and values as sorted lists (ascending order).  
   - Step `0` depends on nothing: its list is always `[]`.

**Example 1**:  
Problem:  
Solve for x: 2x + 5 = 15  
Steps:  
[0] Subtract 5 from both sides: 2x = 10
[1] Divide both sides by 2: x = 5  
Output:  
- Step 0 performs the subtraction operation independently, so it has no dependencies.
- Step 1 uses the simplified equation `2x = 10` (step 0) to solve for `x`, so it depends on step 0 
```json
{{
  0: [],
  1: [0]
}}
```

**Example 2**:  
Problem:  
Find the area of a circle with radius 5.  
Steps:  
[0] Recall the formula: Area = π * r²
[1] Plug in radius: Area = π * 5²
[2] Calculate 5²: 25
[3] Multiply: Area = 25π 
Output:  
- Step 0 introduces the formula for the area of a circle. No dependencies.
- Step 1 substitutes the radius into the formula (step 0), so it depends on step 0 
- Step 2 calculates the square of `5` (`5²`). No dependencies.
- Step 3 uses `π * 5²` (from step 1) and the computed value `25` replacing `5²`(from step 2), so it depends on step 1 and 2.
```json
{{
  0: [], 
  1: [0], 
  2: [1], 
  3: [1, 2]
}}
```  

**Your Task**:  
Given the problem and steps below, output the JSON dependency graph. **Only include direct dependencies** that satisfy the rules above.  

Problem:  
{problem}

Steps:  
{tagged_steps}
