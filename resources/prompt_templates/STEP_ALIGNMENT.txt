My team want to verify a math problem's solution. To speed up the verification process, my team want verify that problem in parallel by splitting the solution into multiple parts, each one will verify one part. This method make sure that each person only need to care about a small part of the solution without touching other part, which can make it really complicated to verify, especially when dealing with olympiad level question. But the problem with verify in parallel is that if we can only access a part of the solution without knowing the context. For example: 
Question: "In triangle $A B C, A B=5, A C=6$, and $\tan \angle B A C=-\frac{4}{3}$. Compute the area of $\triangle A B C$."
Part of solution: "Now, let's find the area of $\triangle ABC$. The area of a triangle is given by the formula $\frac{1}{2}bh$, where $b$ is the base and $h$ is the height. In $\triangle ABC$, we can take $AB$ as the base and $DC$ as the height: \[ \text{Area} = \frac{1}{2} \times AB \times DC = \frac{1}{2} \times 5 \times \frac{24}{5} = \frac{1}{2} \times 24 = 12. \]"
That is a part of a solution for an olympiad level math problem. If you only look at this part of the solution, you will not know that why DC is the height of the triangle and why DC is equal to \frac{24}{5}. Is the author of the solution hallucinating, or all that information have been computed and defined in the previous part. This challenge make it hard to verify one part of the solution with acknowledging previous part. 
I have a solution. (1) I will use a special trained cross-encoder model to classify whether a step s_{t} is relevant to step s_{n} (for every (t, n) satisfy t<n). This will help build the directed edges in the graph. (2) I will use a special trained small LLMs to extract "derived statements" from one step in the solution. A "state" is like some thing have achieved via that reasoning step. This "state" and the original reasoning step is the nodes in the graph. Note that for every full solution, (1) and (2) can be run in parallel. Then for every node, I will use the original reasoning step of that node and the "state" of its parent nodes to verify, by my teammates. So I will use 2 models in total. But the major problem with this solution is in the state extraction phase. What kinds of "state" (or result) do I need to capture to effectively pass its child node for verification (ensure neither too much nor too little information)? Note that these kinds of "state" should be general to apply to every types of problems (geometry like plane geometry, solid geometry, topological geometry, geometric combination, coordinate geometry,...; algebra like equation, system of equations, functional equations, polynomials, inequalities,....; combinations; arithmetic;....). Help me define this part in a detailed way.